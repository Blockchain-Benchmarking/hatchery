#!/bin/bash
#
#   system - Setup a group of machines to run a distributed system
#
#   Syntax: ./setup <output> <etc-asset> <assign> <asset>
#
#   Read the roles written in the given <assign> file and configure the
#   corresponding nodes to behave accordingly for the system.
#   If the nodes need some assets to work, they find the specific asset for
#   the current deployment in <etc-asset> while the top asset directory is
#   specified by <asset>.
#
#   On success, write silk routes corresponding to each role in the <output>
#   file.
#


set -e


output="$1"    ; shift ; test "x${output}" != 'x'
etc_asset="$1" ; shift ; test "x${etc_asset}" != 'x'
assign="$1"    ; shift ; test "x${assign}" != 'x'
asset="$1"     ; shift ; test "x${asset}" != 'x'

source "${assign}"


# System specific setup part --------------------------------------------------

# Name of the deployment.
# This name is reflected on the machines where the system is installed: the
# configuration asset is copied at "${quorum_etc_dir}/${etc_name}".
#
etc_name="${etc_asset##*/}"

# Check that there is at least 1 server defined in <assign>.
#
test "x${server}" != 'x'
test ${#server[@]} -gt 0


source "${0%/*}/environment"


# The `toolbox` binary must have been compiled in order to generate and format
# the accounts in the new asset.
#
command -v toolbox > '/dev/null'


# Check that the config asset <etc-asset> contains the right files.
#
test -f "${etc_asset}/servers/genesis.json"
test -f "${etc_asset}/servers/static-nodes.json"
for node in $(seq 0 $(( ${#server[@]} - 1 ))) ; do
    test -f "${etc_asset}/${node}/nodekey"
done


workdir="$(mktemp -d --suffix='.d' "${0##*/}.XXXXXX")"
trap "rm -rf '${workdir}'" EXIT


# Build local informations.
# We build three values:
# - route    scalar variable which is the silk route to all servers
# - servers  array variable containing the servers as they see each others
# - arch     directory containing the arch of each server
#
route='('
sep=''

servers=()

mkdir "${workdir}/arch"
index=0

for machine in "${server[@]}" ; do
    route="${route}${sep}${machine}"
    sep='|'

    ip="${machine%:*}"
    servers+=("${ip}:${quorum_port}")

    silk run "${machine}" uname -m > "${workdir}/arch/${index}" &
    index=$(( index + 1 ))
done

route="${route})"

wait


# Check that for each arch used by some server, we have the binary assets
# present in the <asset> directory.
#
cat "${workdir}/arch/"* | sort | uniq | while read arch ; do
    bin_asset="${asset}/bin/${arch}"

    if [ ! -e "${bin_asset}" ] ; then
	echo "Error: Missing binaries for '${arch}': '${bin_asset}'" >&2
	exit 1
    fi

    test -f "${bin_asset}/geth"
    test -f "${bin_asset}/istanbul"
    test -f "${bin_asset}/toolbox"
done


# server script - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cat <<EOF > "${workdir}/server"
#!/bin/bash

set -e
set -x

script_dir="\${0%/*}"

export PATH="\${PWD}/${quorum_bin_dir}:\${PATH}"
export PRIVATE_CONFIG=ignore


if [ -e "\${script_dir}/geth" ] ; then
    rm -rf "\${script_dir}/geth"
fi

if [ -e "\${script_dir}/keystore" ] ; then
    rm -rf "\${script_dir}/keystore"
fi

geth --datadir "\${script_dir}" init "\${script_dir}/genesis.json"


geth --datadir "\${script_dir}" \\
     --allow-insecure-unlock \\
     --nodiscover \\
     --istanbul.blockperiod 5 \\
     --syncmode full \\
     --mine \\
     --miner.threads 1 \\
     --verbosity 2 \\
     --networkid 10 \\
     --ws \\
     --ws.addr '0.0.0.0' \\
     --ws.port ${quorum_rpcport} \\
     --ws.api admin,eth,debug,miner,net,txpool,personal,web3,istanbul \\
     --ws.origins "*" \\
     --emitcheckpoints \\
     --port ${quorum_port}
EOF

chmod 755 "${workdir}/server"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Upload the scripts and the assets to the relevant machines
#
silk run --source --local-command "${route}" <<EOF
#!/bin/bash

mkdir '${quorum_dir}' 2> '/dev/null'
mkdir '${quorum_bin_dir}' 2> '/dev/null'
mkdir '${quorum_etc_dir}' 2> '/dev/null'

set -e

test -d '${quorum_etc_dir}'

if [ -e '${quorum_etc_dir}/${etc_name}' ] ; then
    rm -rf '${quorum_etc_dir}/${etc_name}'
fi

mkdir '${quorum_etc_dir}/${etc_name}'
EOF


# Configure the server addresses in a copy of the config asset <etc-asset> and
# send this specialized version along with the server script.
#
cp -R "${etc_asset}" "${workdir}/etc"

for machine in ${servers[@]} ; do
    echo "${machine}"
done | toolbox set-servers "${workdir}/etc"

silk send --compress --target-directory="${quorum_etc_dir}/${etc_name}" \
     "${route}" "${workdir}/etc/servers/"* "${workdir}/server"


# Also send the server specific files to each server.
# Because these files are different between two servers, we have no choice but
# using a `silk send` command per server.
#
for node in $(seq 0 $(( ${#server[@]} - 1 ))) ; do
    silk send --compress --target-directory="${quorum_etc_dir}/${etc_name}" \
	 "${server[$node]}" "${workdir}/etc/${node}/"* &
done

wait


# Send the appropriate binary assets.
# For efficiency reasons, create one route per processor architecture and
# broadcast in a single `silk send` command.
#
cat "${workdir}/arch/"* | sort | uniq | while read arch ; do
    arch_route='('
    sep=''

    for i in $(seq 0 $(( ${#server[@]} ))) ; do
	if [ "x$(cat "${workdir}/arch/${i}")" = "x${arch}" ] ; then
	    arch_route="${arch_route}${sep}${server[${i}]}"
	    sep='|'
	fi
    done

    arch_route="${arch_route})"

    bin_asset="${asset}/bin/${arch}"

    silk send --target-directory="${quorum_bin_dir}" \
	 "${route}" "${bin_asset}/"*
done


echo "servers='${route}'" > "${output}"
